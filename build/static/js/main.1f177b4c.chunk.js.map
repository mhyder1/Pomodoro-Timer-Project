{"version":3,"sources":["utils/duration/index.js","pomodoro/FocusControl.js","pomodoro/BreakControl.js","pomodoro/TimerButtons.js","utils/class-names/index.js","pomodoro/SessionDisplay.js","pomodoro/Pomodoro.js","utils/useInterval/index.js","App.js","index.js"],"names":["minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","FocusControl","focusDuration","handleFocusDecrease","handleFocusIncrease","session","className","data-testid","type","onClick","disabled","BreakControl","breakDuration","handleBreakDecrease","handleBreakIncrease","TimerButtons","classNameToBoolean","isTimerRunning","playPause","handleStop","role","aria-label","title","oi","Object","entries","reduce","classes","value","concat","undefined","filter","join","SessionDisplay","ariaValue","label","toLowerCase","indexOf","substr","givenSeconds","seconds","round","secondsToDuration","timeRemaining","style","height","aria-valuemin","aria-valuemax","aria-valuenow","width","nextTick","prevState","max","Pomodoro","useState","setIsTimerRunning","setFocusDuration","setBreakDuration","setSession","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Audio","play","currentSession","nextSession","rel","href","integrity","crossorigin","min","nextState","prevStateSession","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f177b4c.chunk.js","sourcesContent":["/**\r\n * Formats a number of minutes as 'mm:00'.\r\n *\r\n * For example,\r\n *    minutesToDuration(3) = '03:00'\r\n *    minutesToDuration(45) = '45:00'\r\n *\r\n * @param givenMinutes\r\n *    the number of minutes in the duration\r\n * @returns {string}\r\n *    the given minutes formatted as 'mm:00'\r\n */\r\n\r\nexport function minutesToDuration(givenMinutes) {\r\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\r\n  return `${minutes}:00`;\r\n}\r\n\r\n/**\r\n * Formats a number of seconds as 'mm:ss'.\r\n *\r\n * For example,\r\n *    secondsToDuration(305) = '05:05'\r\n *    secondsToDuration(930) = '15:30'\r\n *\r\n * @param givenSeconds\r\n *    the number of seconds in the duration\r\n * @returns {string}\r\n *    the given seconds formatted as 'mm:ss'\r\n */\r\n\r\nexport function secondsToDuration(givenSeconds) {\r\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\r\n    .toString()\r\n    .padStart(2, \"0\");\r\n  const seconds = Math.round(givenSeconds % 60)\r\n    .toString()\r\n    .padStart(2, \"0\");\r\n  return `${minutes}:${seconds}`;\r\n}\r\n","import React from 'react';\r\nimport { minutesToDuration } from '../utils/duration';\r\n\r\nfunction FocusControl({ focusDuration, handleFocusDecrease, handleFocusIncrease, session }) {\r\n\r\n  return (\r\n    <div className=\"col\">\r\n    <div className=\"input-group input-group-lg mb-2\">\r\n      <span className=\"input-group-text\" data-testid=\"duration-focus\">\r\n        Focus Duration: {minutesToDuration(focusDuration)}\r\n      </span>\r\n      <div className=\"input-group-append\">\r\n        {/* Decreases focus duration by 5 minutes */}\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-secondary\"\r\n          data-testid=\"decrease-focus\"\r\n          onClick={handleFocusDecrease}\r\n          disabled={focusDuration === 5 || !!session}\r\n        >\r\n          <span className=\"oi oi-minus\" />\r\n        </button>\r\n        {/* Increases Focus session by 5 minutes */}\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn btn-secondary\"\r\n          data-testid=\"increase-focus\"\r\n          onClick={handleFocusIncrease}\r\n          disabled={focusDuration === 60 || !!session}\r\n        >\r\n          <span className=\"oi oi-plus\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default FocusControl;","import React from 'react';\r\nimport { minutesToDuration } from \"../utils/duration\";\r\n\r\nfunction BreakControl({ breakDuration, handleBreakDecrease, handleBreakIncrease, session }) {\r\n\r\n  return (\r\n    <div className=\"col\">\r\n      <div className=\"float-right\">\r\n        <div className=\"input-group input-group-lg mb-2\">\r\n          <span className=\"input-group-text\" data-testid=\"duration-break\">\r\n            Break Duration: {minutesToDuration(breakDuration)}\r\n          </span>\r\n          <div className=\"input-group-append\">\r\n           {/* Increases the break duration by one minute*/}\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              data-testid=\"decrease-break\"\r\n              onClick={handleBreakDecrease}\r\n              disabled={breakDuration === 1 || !!session}\r\n            >\r\n              <span className=\"oi oi-minus\" />\r\n            </button>\r\n            {/* Decreases the break duration by one minute */}\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              data-testid=\"increase-break\"\r\n              onClick={handleBreakIncrease}\r\n              disabled={breakDuration === 15 || !!session}\r\n            >\r\n              <span className=\"oi oi-plus\" />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BreakControl;","import React from 'react';\r\nimport classNames from \"../utils/class-names\";\r\n\r\nfunction TimerButtons({ isTimerRunning, session, playPause, handleStop }) {\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col\">\r\n        <div\r\n          className=\"btn-group btn-group-lg mb-2\"\r\n          role=\"group\"\r\n          aria-label=\"Timer controls\"\r\n        >\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            data-testid=\"play-pause\"\r\n            title=\"Start or pause timer\"\r\n            onClick={playPause}\r\n          >\r\n            <span\r\n              className={classNames({\r\n                oi: true,\r\n                \"oi-media-play\": !isTimerRunning,\r\n                \"oi-media-pause\": isTimerRunning,\r\n              })}\r\n            />\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            data-testid=\"stop\"\r\n            title=\"Stop the session\"\r\n            onClick={handleStop}\r\n            disabled={!session}\r\n          >\r\n            <span className=\"oi oi-media-stop\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TimerButtons;","/**\r\n * Use this function to dynamically assign the className property of react components.\r\n *\r\n * Usage:\r\n *\r\n *  <span className={classNames({\r\n *               \"oi\": true,\r\n *               \"oi-media-play\": currentState.isPaused,\r\n *               'oi-media-pause': !currentState.isPaused\r\n *             })}/>\r\n *\r\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\r\n *\r\n * @param classNameToBoolean\r\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\r\n * @returns {string}\r\n *    a space delimited string of the class names which have a value of `true`.\r\n */\r\nexport default function classNames(classNameToBoolean) {\r\n  return Object.entries(classNameToBoolean)\r\n    .reduce(\r\n      (classes, [className, value]) =>\r\n        classes.concat(value ? className : undefined),\r\n      []\r\n    )\r\n    .filter((className) => className !== undefined)\r\n    .join(\" \");\r\n}\r\n","import React from 'react';\r\nimport { minutesToDuration, secondsToDuration } from '../utils/duration';\r\n\r\n\r\nfunction SessionDisplay({ ariaValue, session, focusDuration, breakDuration}) {\r\n  \r\n // will display during a focus or break session\r\n  return( session &&\r\n    <div>\r\n      <div className=\"row mb-2\">\r\n        <div className=\"col\">\r\n          <h2 data-testid=\"session-title\">\r\n            {session && session.label} for {(\"0\" + (session.label.toLowerCase().indexOf(\"ocus\") > 0 ? focusDuration : breakDuration)).substr(-2)}:00 minutes\r\n          </h2>\r\n          <p className=\"lead\" data-testid=\"session-sub-title\">\r\n            {secondsToDuration(session.timeRemaining)} remaining\r\n          </p>\r\n        </div>\r\n      </div>\r\n      {/* progress bar */}\r\n      <div className=\"row mb-2\">\r\n        <div className=\"col\">\r\n          <div className=\"progress\" style={{ height: \"20px\" }}>\r\n            <div\r\n              className=\"progress-bar\"\r\n              role=\"progressbar\"\r\n              aria-valuemin=\"0\"\r\n              aria-valuemax=\"100\"\r\n              aria-valuenow={ariaValue()\r\n              }\r\n              style={{\r\n                width: `${ariaValue()}%` \r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n     </div>\r\n   \r\n  );\r\n}\r\n\r\nexport default SessionDisplay;","import React, { useState } from \"react\";\r\nimport useInterval from \"../utils/useInterval\";\r\nimport FocusControl from \"./FocusControl\";\r\nimport BreakControl from \"./BreakControl\";\r\nimport TimerButtons from \"./TimerButtons\";\r\nimport SessionDisplay from \"./SessionDisplay\";\r\n// These functions are defined outside of the component to insure they do not have access to state\r\n// and are, therefore more likely to be pure.\r\n\r\n/**\r\n * Update the session state with new state after each tick of the interval.\r\n * @param prevState\r\n *  the previous session state\r\n * @returns\r\n *  new session state with timing information updated.\r\n */\r\nfunction nextTick(prevState) {\r\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\r\n  return {\r\n    ...prevState,\r\n    timeRemaining,\r\n  };\r\n}\r\n\r\n/**\r\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\r\n * @param focusDuration\r\n *    the current focus duration\r\n * @param breakDuration\r\n *    the current break duration\r\n * @returns\r\n *  function to update the session state.\r\n */\r\nfunction nextSession(focusDuration, breakDuration) {\r\n  /**\r\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\r\n   */\r\n  return (currentSession) => {\r\n    if (currentSession.label === \"Focusing\") {\r\n      return {\r\n        label: \"On Break\",\r\n        timeRemaining: breakDuration * 60,\r\n      };\r\n    }\r\n    return {\r\n      label: \"Focusing\",\r\n      timeRemaining: focusDuration * 60,\r\n    };\r\n  };\r\n}\r\n\r\nfunction Pomodoro() {\r\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\r\n  const [focusDuration, setFocusDuration] = useState(25);\r\n  const [breakDuration, setBreakDuration] = useState(5);\r\n  const [session, setSession] = useState(null);\r\n\r\n  \r\n  const handleFocusDecrease = () => {\r\n    setFocusDuration(Math.max(5, focusDuration - 5));\r\n  };\r\n  const handleFocusIncrase = () => {\r\n    setFocusDuration(Math.min(60, focusDuration + 5));\r\n  };\r\n\r\n  const handleBreakDecrease = () => {\r\n    setBreakDuration(Math.max(1, breakDuration - 1));\r\n  };\r\n  const handleBreakIncrease = () => {\r\n    setBreakDuration(Math.min(15, breakDuration + 1));\r\n  };\r\n\r\n  const handleStop = () => {\r\n    setIsTimerRunning(false);\r\n    setSession(null);\r\n  }\r\n\r\n  /**\r\n   * Custom hook that invokes the callback function every second\r\n   *\r\n   * NOTE: You will not need to make changes to the callback function\r\n   */\r\n  useInterval(() => {\r\n      if (session.timeRemaining === 0) {\r\n        new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\r\n        return setSession(nextSession(focusDuration, breakDuration));\r\n      }\r\n      return setSession(nextTick);\r\n    \r\n    },\r\n    isTimerRunning ? 1000 : null\r\n  );\r\n\r\n  /**\r\n   * Called whenever the play/pause button is clicked.\r\n   */\r\n  function playPause() {\r\n    setIsTimerRunning((prevState) => {\r\n      const nextState = !prevState;\r\n      if (nextState) {\r\n        setSession((prevStateSession) => {\r\n          // If the timer is starting and the previous session is null,\r\n          // start a focusing session.\r\n          if (prevStateSession === null) {\r\n            return {\r\n              label: \"Focusing\",\r\n              timeRemaining: focusDuration * 60,\r\n            };\r\n          }\r\n          return prevStateSession;\r\n        });\r\n      }\r\n      return nextState;\r\n    });\r\n  }\r\n\r\n  //value for progress bar percentage\r\n   function ariaValue(){\r\n     if(!session) return null;\r\n     if(session.label === \"Focusing\") return 100 - (((session.timeRemaining)/(focusDuration*60)) * 100);\r\n     else return 100 - (((session.timeRemaining)/(breakDuration*60)) * 100);\r\n  }\r\n  \r\n  return (\r\n    <div className=\"pomodoro\">\r\n      <link\r\n      rel=\"stylesheet\"\r\n      href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\"\r\n      integrity=\"sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z\"\r\n      crossorigin=\"anonymous\"\r\n    />\r\n    <link\r\n      rel=\"stylesheet\"\r\n      href=\"https://cdnjs.cloudflare.com/ajax/libs/open-iconic/1.1.1/font/css/open-iconic-bootstrap.min.css\"\r\n      integrity=\"sha512-UyNhw5RNpQaCai2EdC+Js0QL4RlVmiq41DkmCJsRV3ZxipG2L0HhTqIf/H9Hp8ez2EnFlkBnjRGJU2stW3Lj+w==\"\r\n      crossorigin=\"anonymous\"\r\n    />\r\n       <div className=\"row\">\r\n        \r\n        <FocusControl handleFocusDecrease={handleFocusDecrease}\r\n        focusDuration={focusDuration}\r\n        handleFocusIncrease={handleFocusIncrase} \r\n        session={session}\r\n        />\r\n        <BreakControl handleBreakDecrease={handleBreakDecrease}\r\n        breakDuration={breakDuration}\r\n        handleBreakIncrease={handleBreakIncrease}\r\n        session={session}\r\n        />  \r\n      </div>\r\n\r\n      <div>\r\n        <TimerButtons isTimerRunning={isTimerRunning}\r\n          playPause={playPause} \r\n          session={session}\r\n          handleStop={handleStop}\r\n        />\r\n        <SessionDisplay session={session}\r\n          focusDuration={focusDuration}\r\n          breakDuration={breakDuration}\r\n          ariaValue={ariaValue}\r\n        />\r\n        </div>\r\n     </div>\r\n  );\r\n}\r\n\r\nexport default Pomodoro;\r\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\r\n\r\nimport { useEffect, useRef } from \"react\";\r\n\r\nexport default function useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n\r\n    if (delay !== null) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Pomodoro from \"./pomodoro/Pomodoro\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header container\">\r\n        <h1>Pomodoro Timer</h1>\r\n      </header>\r\n      <div className=\"container\">\r\n        <Pomodoro />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}